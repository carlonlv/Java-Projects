#########
# Step 1

Code affected: none

Created this file.
#########
# Step 2

Code affected: all .java files

Reformatted using the Google Java style formatter.
#########
# Step 3

Code affected: Pig.turnAround, Human.java, Chicken.java

Flaw: unnecessary if, leading to duplicate code.

Fix: Replaced if statement with a single assignment statement.
#########
# Step 4

Code affected: ANIMAL_MANURE.java, Main.java, Chicken.java, Pig.java

Flaw: The name of a class should not be all caps by convention.

Fix: Renamed the name of class and constructor and all other instances of ANIMAL_MANURE in other classes to AnimalManure.
#########
# Step 5

Code affected: AnimalManure.java, AnimalFood.java, Chicken.java, Human.java, Pig.java, Egg.java

Flaw: All the methods g.fillText inside drawString seem to put x and y in reversed order.

Fix: Reversed the order of x and y in parameters of g.fillText in all drawString.
#########
# Step 6

Code affected: AnimalManure.java, AnimalFood.java

Flaw: All the methods drawString inside draw seem to put x and y in reversed order.

Fix: Reversed the order of x and y in parameters of drawString in all draw methods.
#########
# Step 7

Code affected: AnimalManure.java, AnimalFood.java, Chicken.java, Human.java, Pig.java

Flaw: All the methods drawString seems to have similar functionality to draw and therefore redundant.

Fix: Combined draw and drawString methods.
#########
# Step 8

Code affected: Chicken.java, Human.java

Flaw: The reverseAppearance method uses "+=" for String concatenation.

Fix: Changed to String builder, used .append method to concatenate.
#########
# Step 9

Code affected: Chicken.java, Human.java, Pig.java, AnimalFood.java, AnimalManure.java, Egg.java, FarmCreature.java, FarmProduct.java, Main.java

Flaw: All java files have duplicate methods and field. Some animals are not being constructed properly in the right positions.

Fix: Created two abstract parent classes(FarmCreatures.java and FarmProduct.java) to reduce the common attributes and methods, and made every files compile.
Also made the animals constructed in main.java properly in their right places.
#########
# Step 10

Code affected: Main.java, Human.java, Chicken.java, Pig.java

Flaw: Main.java is not a good name, and Main.java does not store farm objects, instead Human.java store farm animals which does not quite make sense.

Fix: Changed Main.java to FarmSimulator.java, and added arrays that store farm objects. Deleted the multidimensional array in Human.java and Main.java. Made everything in Chicken.java and Pig.java compile.
#########
# Step 11

Code affected:  Chicken.java, Human.java, Pig.java, FarmCreature.java, FarmProduct.java, Main.java

Flaw: The fields in FarmSimulator are not encapsulated and charWidth and charHeight are not used.

Fix: Created getter for all fieds in FarmSimulator and replaced every constants in draw methods in every .java classes with charWidth and charHeight.
#########
# Step 12

Code affected: Chicken.java, Human.java, Pig.java, FarmCreature.java, FarmSimulator.java

Flaw: The original move method in those files are buggy, chicken and pig don't try to find food while human don't try to pick up egg and clean up manures.

Fix: Overhauled move method in Chicken.java, Pig.java and Human.java, changed digest method in Pig.java and Chicken.java. Made human properly pick up eggs and the counter in FarmSimulator.java work properly.
Added roam method to Chicken, Human and Pig so that they move randomly when they have no target.
#########
# Step 13

Code affected: FarmCreature.java, Pig.java, Chicken.java, Human.java

Flaw: It seems that turnAround method is only used by roam method which makes it a little redundant. Also move method seems pretty messy with all the random local variables.

Fix: Concatenated turnAround method and roam method. Transferred the probability variable into digest, layEgg and dropFood method from move method.
#########
# Step 14

Code affected: Wind.java, AnimalFood.java, FarmSimulator.java

Flaw: There are lots of duplicated and unnecessary codes in Wind.java and AnimalFood.java.

Fix: Simplified wind-related methods and created surveillance of wind condition in FarmSimulator canvas.
#########
# Step 15

Code affected: Pig.java, Chicken.java, FarmSimulator.java

Flaw: There is a bug that pig or chicken eats the food that has already been eaten by another chicken or pig. Pig and chicken eat and digest all the time which does not make sense.

Fix: Fixed the bug so that pig or chicken does not eat food when their target has been eaten by another chicken or pig. Added hunger system so that pigs and chickens only eat when they are
hungry, and digest or lay eggs only when they are full.
#########
# Step 16

Code affected: Pig.java, Chicken.java, Human.java, FarmCreature.java, FarmProduct.java, Wind.java

Flaw: The encapsulation of methods in those files are not optimized.

Fix: Optimized all methods to the minimum visibility possible.
#########
# Step 17

Code affected: All .java files in farmyard package

Flaw: The java doc is partially missing or inaccurate.

Fix: Fixed or added java doc for all methods.
#########
# Step 18

Code affected: Human.java, Pig.java

Flaw: Minor typo and no annotations for override methods.

Fix: Added override annotations to override methods.
#########
# Step 19

Code affected: Human.java, Pig.java, Chicken.java

Flaw: There is a bug where human, pig and chicken instantly move to their target.

Fix: Fixed the bug and now the chickens, pigs and human moves correctly.
#########
# Step 20

Code affected: AnimalFood.java, FarmSimulator.java, Human.java

Flaw: There is a bug where the animal food vertically goes to the opposite direction of the wind. The farm simulator is
kind of dull having the same amount of animals res-pawning at the same position every time.

Fix: Fixed the bug and now the animal food respond properly to the wind. Added new feature where animals and human res-pawn
randomly.
#########
# Step 21

Code affected: FarmCreature.java, FarmSimulator.java, AnimalFood.java

Flaw: Sometimes the creatures roam outside of the border and the food gets blown out of the border, and this is the possible
cause of the exception(that was mentioned in the handout).

Fix: The creatures turn around when they hit borders, and the food stops moving when hitting the border hence preventing the
exception from happening.
#########
# Step 22

Code affected: FarmCreature.java, Mouse.java, FarmSimulator.java

Flaw: The simulation of farm is a bit simple.

Fix: Added a new creature : mouse. Each farm generates a mouse that steals the food. It roams just as fast as pigs or chickens,
but as soon as it sees its target, it sprints twice as fast towards the target.
#########
# Step 23

Code affected: FarmCreature.java, AnimalFood.java, FarmSimulator.java

Flaw: There is a bug where the food gets blown outside of the right or downer bounds. Animals also roams outside the right and downer bounds.

Fix: Redefined the x and y coordinates of the border, now food and animal correctly respond when they hit the borders.
#########
# Step 24

Code affected: FarmCreature.java, Pig.java, Chicken.java, Human.java, Mouse.java

Flaw: The move methods has a chunk of common code that is used by human, mouse and pig.

Fix: Pulled up the common code in move methods and target-related fields and methods to the parent class.
